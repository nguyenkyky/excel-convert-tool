{"ast":null,"code":"var _jsxFileName = \"/Users/kynguyen/Documents/WorkSpace/React/excel-convert/convert-tool/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as XLSX from \"xlsx\";\nimport { saveAs } from \"file-saver\";\nimport JSZip from \"jszip\";\nimport \"./style.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport { FormControl } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelTool = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [convertedTxtLinks, setConvertedTxtLinks] = useState([]);\n  const [zipFileName, setZipFileName] = useState(\"Converted\");\n  const jsonDataRef = useRef([]);\n  const fieldIndexesRef = useRef([]);\n  const onDrop = acceptedFiles => {\n    if (acceptedFiles && acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      if (file.name.endsWith(\".xlsx\") || file.name.endsWith(\".xls\")) {\n        setSelectedFile(acceptedFiles[0]);\n        setConvertedTxtLinks([]); // Reset the converted txt links\n        setZipFileName(getBaseFileName(acceptedFiles[0].name)); // Đặt tên mặc định file ZIP giống với file excel\n      } else {\n        alert(\"Chọn đúng định dạng file (.xlsx hoặc .xls)\");\n      }\n    }\n  };\n\n  // Lấy tên file excel\n  function getBaseFileName(fileName) {\n    const lastDotIndex = fileName.lastIndexOf(\".\");\n    if (lastDotIndex !== -1) {\n      return fileName.substring(0, lastDotIndex);\n    }\n    return fileName;\n  }\n  const gradeLevels = [\"<Preschool>\", \"<Kindergarten>\", \"<Grade 1>\", \"<Grade 2>\", \"<Grade 3>\", \"<Grade 4>\", \"<Grade 5>\", \"<Grade 6>\", \"<Grade 7>\", \"<Grade 8>\", \"<Grade 9>\", \"<Grade 10>\", \"<Grade 11>\", \"<Grade 12>\"];\n  const newGradeLevels = [\"Preschool\", \"Kindergarten\", \"Grade 1\", \"Grade 2\", \"Grade 3\", \"Grade 4\", \"Grade 5\", \"Grade 6\", \"Grade 7\", \"Grade 8\", \"Grade 9\", \"Grade 10\", \"Grade 11\", \"Grade 12\"];\n  const convertExcelToTxt = () => {\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const data = new Uint8Array(event.target.result);\n        const workbook = XLSX.read(data, {\n          type: \"array\"\n        });\n        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(firstSheet, {\n          header: 1\n        });\n        jsonDataRef.current = XLSX.utils.sheet_to_json(firstSheet, {\n          header: 1\n        });\n\n        // Lấy các fields ở hàng đầu tiên\n        const headerRow = jsonData[0];\n        const fields = [\"Title\", \"Tags\", \"Topics\", \"CCSS\", \"Categories\", \"Grade\", \"Description\"];\n\n        // Lấy dữ liệu của Start grade và End grade\n        const gradeFields = [\"Start grade\", \"End grade\"];\n        const fieldIndexes = findFieldIndexes(headerRow, fields);\n        fieldIndexesRef.current = findFieldIndexes(headerRow, fields);\n        const gradeFieldIndexes = findFieldIndexes(headerRow, gradeFields);\n        const txtFileLinks = [];\n        jsonData.slice(1).forEach((rowData, rowIndex) => {\n          // Kiểm tra xem có dữ liệu trong dòng rowData hay không thì mới convert\n          const hasData = fields.some(field => rowData[fieldIndexes[field]] !== undefined && rowData[fieldIndexes[field]] !== \"\");\n          if (hasData) {\n            const startGrade = rowData[gradeFieldIndexes[\"Start grade\"]];\n            const endGrade = rowData[gradeFieldIndexes[\"End grade\"]];\n            let gradeRange = [];\n            // console.log(startGrade, endGrade);\n\n            // Lấy khoảng Grade\n            if (startGrade && endGrade) {\n              let startIndex = gradeLevels.indexOf(startGrade);\n              let endIndex = gradeLevels.indexOf(endGrade);\n              if (startIndex === -1 || endIndex === -1) {\n                startIndex = newGradeLevels.indexOf(startGrade);\n                endIndex = newGradeLevels.indexOf(endGrade);\n                gradeRange = gradeLevels.slice(startIndex, endIndex + 1);\n              } else {\n                gradeRange = gradeLevels.slice(startIndex, endIndex + 1);\n                //   console.log(gradeRange);\n              }\n            }\n\n            const title = rowData[fieldIndexes[\"Title\"]];\n            if (!title) return;\n\n            // Lấy dữ liệu trên từng hàng ứng với các trường trong mảng fields[]\n            const txtContentArray = fields.map(field => {\n              const cellValue = rowData[fieldIndexes[field]] || \"\";\n              if (field === \"Tags\" || field === \"Topics\" || field === \"CCSS\" || field === \"Categories\") {\n                if (cellValue) {\n                  const dataParts = cellValue.split(\",\").map(item => `<${item.trim()}>`);\n                  return `${field}:${dataParts.join(\", \")}`;\n                }\n              }\n              if (field === \"Grade\") {\n                return `Grade:${gradeRange.join(\", \")}`;\n              } else {\n                return `${field}:${cellValue ? `<${cellValue}>` : \"\"}`;\n              }\n            });\n            const txtBlob = new Blob([txtContentArray.join(\"\\n\")], {\n              type: \"text/plain\"\n            });\n            const txtDownloadLink = URL.createObjectURL(txtBlob);\n            txtFileLinks.push({\n              title,\n              link: txtDownloadLink\n            });\n          }\n        });\n        setConvertedTxtLinks(txtFileLinks);\n      };\n      reader.readAsArrayBuffer(selectedFile);\n    }\n  };\n\n  // Đánh dấu vị trí của các phần tử trong fields(đánh dấu vị trí cột)\n  const findFieldIndexes = (headerRow, fields) => {\n    const fieldIndexes = {};\n    headerRow.forEach((cellValue, columnIndex) => {\n      if (fields.includes(cellValue)) {\n        fieldIndexes[cellValue] = columnIndex;\n      }\n    });\n    return fieldIndexes;\n  };\n\n  // Đoạn này warning\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    accept: \".xlsx, .xls\",\n    maxFiles: 1\n  });\n  const downloadZip = async () => {\n    if (convertedTxtLinks.length > 0) {\n      const zip = new JSZip();\n      await Promise.all(convertedTxtLinks.map(({\n        title,\n        link\n      }, index) => {\n        const formatTitle = title.replace(/[/\\\\?%*:|\"<>]/g, \"-\"); // Thay thế các ký tự không hợp lệ khi đặt tên bằng dấu gạch ngang\n        // const title = jsonDataRef.current[index+1][fieldIndexesRef.current[\"Title\"]];\n        // const fileName = title ? `${title}.txt` : `data_${index + 1}.txt`; // Đặt tên tệp txt\n        return fetch(link).then(response => response.blob()).then(blob => {\n          zip.file(`${formatTitle}.txt`, blob);\n        });\n      }));\n      zip.generateAsync({\n        type: \"blob\"\n      }).then(content => {\n        saveAs(content, `${zipFileName}.zip`);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"convert-tool\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      className: \"dropzone\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"K\\xE9o th\\u1EA3 file Excel, ho\\u1EB7c Click \\u0111\\u1EC3 t\\u1EA3i l\\xEAn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-file\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"File \\u0111\\xE3 ch\\u1ECDn: \", selectedFile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"text-white\",\n        onClick: convertExcelToTxt,\n        children: \"Chuy\\u1EC3n \\u0111\\u1ED5i sang txt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }, this), convertedTxtLinks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"download\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: \"13px\"\n        },\n        children: [\"Converted \", selectedFile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nh\\u1EADp t\\xEAn ZIP file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"name-form\",\n        type: \"text\",\n        value: zipFileName,\n        onChange: e => setZipFileName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"T\\u1EA3i v\\u1EC1 ZIP file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"text-white\",\n        onClick: downloadZip,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 9\n  }, this);\n};\n_s(ExcelTool, \"WFtiPKlLbHFBD8i3HhXkK/KHQo4=\", false, function () {\n  return [useDropzone];\n});\n_c = ExcelTool;\nexport default ExcelTool;\nvar _c;\n$RefreshReg$(_c, \"ExcelTool\");","map":{"version":3,"names":["React","useRef","useState","PropTypes","useDropzone","XLSX","saveAs","JSZip","Button","FormControl","axios","jsxDEV","_jsxDEV","ExcelTool","_s","selectedFile","setSelectedFile","convertedTxtLinks","setConvertedTxtLinks","zipFileName","setZipFileName","jsonDataRef","fieldIndexesRef","onDrop","acceptedFiles","length","file","name","endsWith","getBaseFileName","alert","fileName","lastDotIndex","lastIndexOf","substring","gradeLevels","newGradeLevels","convertExcelToTxt","reader","FileReader","onload","event","data","Uint8Array","target","result","workbook","read","type","firstSheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","header","current","headerRow","fields","gradeFields","fieldIndexes","findFieldIndexes","gradeFieldIndexes","txtFileLinks","slice","forEach","rowData","rowIndex","hasData","some","field","undefined","startGrade","endGrade","gradeRange","startIndex","indexOf","endIndex","title","txtContentArray","map","cellValue","dataParts","split","item","trim","join","txtBlob","Blob","txtDownloadLink","URL","createObjectURL","push","link","readAsArrayBuffer","columnIndex","includes","getRootProps","getInputProps","accept","maxFiles","downloadZip","zip","Promise","all","index","formatTitle","replace","fetch","then","response","blob","generateAsync","content","className","children","_jsxFileName","lineNumber","columnNumber","onClick","style","fontSize","value","onChange","e","_c","$RefreshReg$"],"sources":["/Users/kynguyen/Documents/WorkSpace/React/excel-convert/convert-tool/src/App.jsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as XLSX from \"xlsx\";\nimport { saveAs } from \"file-saver\";\nimport JSZip from \"jszip\";\nimport \"./style.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport { FormControl } from \"react-bootstrap\";\nimport axios from \"axios\";\n\n\nconst ExcelTool = () => {\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [convertedTxtLinks, setConvertedTxtLinks] = useState([]);\n    const [zipFileName, setZipFileName] = useState(\"Converted\");\n    const jsonDataRef = useRef([]);\n    const fieldIndexesRef = useRef([]);\n\n    const onDrop = (acceptedFiles) => {\n        if (acceptedFiles && acceptedFiles.length > 0) {\n            \n            const file = acceptedFiles[0];\n            if (file.name.endsWith(\".xlsx\") || file.name.endsWith(\".xls\")) {\n                setSelectedFile(acceptedFiles[0]);\n                setConvertedTxtLinks([]); // Reset the converted txt links\n                setZipFileName(getBaseFileName(acceptedFiles[0].name)); // Đặt tên mặc định file ZIP giống với file excel\n            } else {\n                alert(\"Chọn đúng định dạng file (.xlsx hoặc .xls)\");\n            }\n        }\n    };\n\n\n\n    // Lấy tên file excel\n    function getBaseFileName(fileName) {\n        const lastDotIndex = fileName.lastIndexOf(\".\");\n        if (lastDotIndex !== -1) {\n            return fileName.substring(0, lastDotIndex);\n        }\n        return fileName;\n    }\n    const gradeLevels = [\n        \"<Preschool>\",\n        \"<Kindergarten>\",\n        \"<Grade 1>\",\n        \"<Grade 2>\",\n        \"<Grade 3>\",\n        \"<Grade 4>\",\n        \"<Grade 5>\",\n        \"<Grade 6>\",\n        \"<Grade 7>\",\n        \"<Grade 8>\",\n        \"<Grade 9>\",\n        \"<Grade 10>\",\n        \"<Grade 11>\",\n        \"<Grade 12>\",\n    ];\n    const newGradeLevels = [\n        \"Preschool\",\n        \"Kindergarten\",\n        \"Grade 1\",\n        \"Grade 2\",\n        \"Grade 3\",\n        \"Grade 4\",\n        \"Grade 5\",\n        \"Grade 6\",\n        \"Grade 7\",\n        \"Grade 8\",\n        \"Grade 9\",\n        \"Grade 10\",\n        \"Grade 11\",\n        \"Grade 12\",\n    ];\n\n    const convertExcelToTxt = () => {\n        if (selectedFile) {\n            const reader = new FileReader();\n            reader.onload = (event) => {\n                const data = new Uint8Array(event.target.result);\n                const workbook = XLSX.read(data, { type: \"array\" });\n                const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n                const jsonData = XLSX.utils.sheet_to_json(firstSheet, {\n                    header: 1,\n                });\n                jsonDataRef.current = XLSX.utils.sheet_to_json(firstSheet, {\n                    header: 1,\n                });\n\n                // Lấy các fields ở hàng đầu tiên\n                const headerRow = jsonData[0];\n\n                const fields = [\n                    \"Title\",\n                    \"Tags\",\n                    \"Topics\",\n                    \"CCSS\",\n                    \"Categories\",\n                    \"Grade\",\n                    \"Description\",\n                ];\n\n                // Lấy dữ liệu của Start grade và End grade\n                const gradeFields = [\"Start grade\", \"End grade\"];\n                const fieldIndexes = findFieldIndexes(headerRow, fields);\n                fieldIndexesRef.current = findFieldIndexes(headerRow, fields);\n                const gradeFieldIndexes = findFieldIndexes(\n                    headerRow,\n                    gradeFields\n                );\n\n                const txtFileLinks = [];\n\n                jsonData.slice(1).forEach((rowData, rowIndex) => {\n                    // Kiểm tra xem có dữ liệu trong dòng rowData hay không thì mới convert\n                    const hasData = fields.some(\n                        (field) =>\n                            rowData[fieldIndexes[field]] !== undefined &&\n                            rowData[fieldIndexes[field]] !== \"\"\n                    );\n                    if (hasData) {\n                        const startGrade =\n                            rowData[gradeFieldIndexes[\"Start grade\"]];\n                        const endGrade =\n                            rowData[gradeFieldIndexes[\"End grade\"]];\n                        let gradeRange = [];\n                        // console.log(startGrade, endGrade);\n\n                        // Lấy khoảng Grade\n                        if (startGrade && endGrade) {\n                            let startIndex = gradeLevels.indexOf(startGrade);\n                            let endIndex = gradeLevels.indexOf(endGrade);\n                            if (startIndex === -1 || endIndex === -1) {\n                                startIndex = newGradeLevels.indexOf(startGrade);\n                                endIndex = newGradeLevels.indexOf(endGrade);\n                                gradeRange = gradeLevels.slice(\n                                    startIndex,\n                                    endIndex + 1\n                                );\n                            } else {\n                                gradeRange = gradeLevels.slice(\n                                    startIndex,\n                                    endIndex + 1\n                                );\n                                //   console.log(gradeRange);\n                            }\n                        }\n\n                        const title = rowData[fieldIndexes[\"Title\"]];\n                        if(!title) return;\n\n                        // Lấy dữ liệu trên từng hàng ứng với các trường trong mảng fields[]\n                        const txtContentArray = fields.map((field) => {\n                            const cellValue =\n                                rowData[fieldIndexes[field]] || \"\";\n                            if (field === \"Tags\" || field === \"Topics\" || field === \"CCSS\" || field === \"Categories\") {\n                                if(cellValue) {\n\n                                    const dataParts = cellValue\n                                        .split(\",\")\n                                        .map((item) => `<${item.trim()}>`);\n                                    return `${field}:${dataParts.join(\", \")}`;\n                                }\n                            }\n                            if (field === \"Grade\") {\n                                return `Grade:${gradeRange.join(\", \")}`;\n                            } else {\n                                return `${field}:${\n                                    cellValue ? `<${cellValue}>` : \"\"\n                                }`;\n                            }\n                        });\n\n                        const txtBlob = new Blob([txtContentArray.join(\"\\n\")], {\n                            type: \"text/plain\",\n                        });\n                        const txtDownloadLink = URL.createObjectURL(txtBlob);\n                        txtFileLinks.push({title, link: txtDownloadLink});\n                    }\n                });\n\n                setConvertedTxtLinks(txtFileLinks);\n            };\n            reader.readAsArrayBuffer(selectedFile);\n        }\n    };\n\n    // Đánh dấu vị trí của các phần tử trong fields(đánh dấu vị trí cột)\n    const findFieldIndexes = (headerRow, fields) => {\n        const fieldIndexes = {};\n\n        headerRow.forEach((cellValue, columnIndex) => {\n            if (fields.includes(cellValue)) {\n                fieldIndexes[cellValue] = columnIndex;\n            }\n        });\n\n        return fieldIndexes;\n    };\n\n    // Đoạn này warning\n    const { getRootProps, getInputProps } = useDropzone({\n        onDrop,\n        accept: \".xlsx, .xls\",\n        maxFiles: 1,\n    });\n\n    const downloadZip = async () => {\n        if (convertedTxtLinks.length > 0) {\n            const zip = new JSZip();\n\n            await Promise.all(\n                convertedTxtLinks.map(({title,link}, index) => {\n                    const formatTitle = title.replace(/[/\\\\?%*:|\"<>]/g, \"-\"); // Thay thế các ký tự không hợp lệ khi đặt tên bằng dấu gạch ngang\n                    // const title = jsonDataRef.current[index+1][fieldIndexesRef.current[\"Title\"]];\n                    // const fileName = title ? `${title}.txt` : `data_${index + 1}.txt`; // Đặt tên tệp txt\n                    return fetch(link)\n                        .then((response) => response.blob())\n                        .then((blob) => {\n                            zip.file(`${formatTitle}.txt`, blob);\n                        });\n                })\n            );\n\n            zip.generateAsync({ type: \"blob\" }).then((content) => {\n                saveAs(content, `${zipFileName}.zip`);\n            });\n        }\n    };\n\n    return (\n        <div className=\"convert-tool\">\n            <div {...getRootProps()} className=\"dropzone\">\n                <input {...getInputProps()} />\n                <p>Kéo thả file Excel, hoặc Click để tải lên</p>\n            </div>\n            {selectedFile && (\n                <div className=\"selected-file\">\n                    <p>File đã chọn: {selectedFile.name}</p>\n                    <Button className=\"text-white\" onClick={convertExcelToTxt}>\n                        Chuyển đổi sang txt\n                    </Button>\n                </div>\n            )}\n            {convertedTxtLinks.length > 0 && (\n                <div className=\"download\">\n                    <p style={{ fontSize: \"13px\" }}>\n                        Converted {selectedFile.name}\n                    </p>\n\n                    <p>Nhập tên ZIP file</p>\n                    <input\n                        className=\"name-form\"\n                        type=\"text\"\n                        value={zipFileName}\n                        onChange={(e) => setZipFileName(e.target.value)}\n                    />\n\n                    <p>Tải về ZIP file</p>\n                    <Button className=\"text-white\" onClick={downloadZip}>\n                        Download\n                    </Button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ExcelTool;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}